// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  extensions = [postgis(version: "3.3.2")]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id        String      @id @default(cuid())
  name      String
  description String
  address String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // the geometry column itself
  coords    Unsupported("geometry(Point, 4326)")
  // the index for that column
  @@index([coords], name: "location_idx", type: Gist)

  promotions PromotionsOnLocations[]
}

model Promotion {
  id        String      @id @default(cuid())
  productName      String
  productDescription String
  imageUrl String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  locations PromotionsOnLocations[]
}

model PromotionsOnLocations {
  location       Location     @relation(fields: [locationId], references: [id])
  locationId     String // relation scalar field (used in the `@relation` attribute above)
  promotion      Promotion @relation(fields: [promotionId], references: [id])
  promotionId    String // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([locationId, promotionId])
}